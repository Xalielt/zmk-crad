/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>


&mt {
  //  flavor = "tap-preferred";
   // tapping_term_ms = <200>;
};

/ { 

    combos {
        compatible = "zmk,combos";
        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
        };
        
        combo_tab {
            timeout-ms = <50>;
            key-positions = <10 11>;
            bindings = <&kp TAB>;
        };
        
        combo_ralt {
            timeout-ms = <50>;
            key-positions = <17 16>;
            bindings = <&kp RALT>;
        };
        
        combo_lalt {
            timeout-ms = <50>;
            key-positions = <11 12>;
            bindings = <&kp LALT>;
        };
        
        combo_lgui {
            timeout-ms = <50>;
            key-positions = <12 13>;
            bindings = <&kp LGUI>;
        };
         
        combo_rgui {
            timeout-ms = <50>;
            key-positions = <17 18>;
            bindings = <&kp RGUI>;
        };

        combo_bspc {
            timeout-ms = <50>;
            key-positions = <6 7>;
            bindings = <&kp BSPC>;
        };
        
           combo_del {
            timeout-ms = <50>;
            key-positions = <7 8>;
            bindings = <&kp DEL>;
        };
        
    };




        keymap {
                compatible = "zmk,keymap";
                
       	default_layer {
		bindings = <
		&kp Q           &kp W           &kp E           &kp R           &lt 4 T 		&kp Y           &kp U           &kp I           &kp O           &kp P 
		&mt LSFT  A     &kp S           &kp D           &kp F           &lt 5 G	   	        &kp H           &kp J           &kp K           &kp L           &mt LSFT QUOT
		&mt LCTRL Z     &kp X           &kp C           &kp V           &lt 3 B			&kp N           &kp M           &kp CMMA        &kp DOT         &mt LCTRL RET
          				                        &kp LALT        &kp LGUI  		&kp SPC         &to 1 
		>;
		};
        		
		second_layer {
		bindings = <
		&kp NUM_1       &kp NUM_2       &kp NUM_3       &kp NUM_4       &kp NUM_5		    &kp NUM_6       &kp NUM_7       &kp NUM_8       &kp NUM_9       &kp NUM_0 
		&kp LSFT        &kp QMARK       &kp FSLH        &kp SEMI        &kp EQUAL		    &kp MINUS       &kp PLUS        &kp FSLH        &kp KP_MULTIPLY &kp BKSP
		&kp LCTRL        &kp KPLS        &kp LBKT        &kp RBKT        &kp BSLH    		&kp UNDER       &kp LEFT        &kp DOWN        &kp UP          &kp RIGHT
					                                    &to 0           &kp LGUI  	        &kp SPC         &to 2 
		>;
		};

       	calc_layer {
		bindings = <
        	&kp BANG        &kp ATSN        &kp HASH        &kp DLLR        &kp PRCT    	    	&kp CRRT        &kp AMPS        &kp KMLT        &kp LPRN        &kp RPRN 
		&kp TAB         &kp LC(S)       &kp DQT         &kp PIPE2       &kp HASH		&kp MINUS       &kp EQL         &kp LBKT        &kp RBKT        &kp DEL 
		&kp ESC         &kp TILDE 	&kp NON_US_BSLH &kp NON_US_HASH &kp TILDE2 		&kp MINUS       &kp GRAVE       &kp LBKT        &kp RBKT        &kp DEL 
					                    	&to 0           &kp LGUI 		&kp SPC         &to 3
		>;
		};
	
		
		numpad_layer {
		bindings = <
		&none       	&none        	&kp EQUAL       &none          	&none			&kp KP_DIVIDE   &kp N7          &kp N8          &kp N9           &kp KP_PLUS
		&bt BT_SEL 0    &bt BT_SEL 1    &bt BT_SEL 2    &bt BT_SEL 3    &bt BT_SEL 4  		&kp KP_DOT      &kp N4          &kp N5          &kp N6           &kp KP_MINUS
		&bt BT_CLR      &bt BT_NXT      &bt BT_PRV      &none           &none   		&kp N0          &kp N1          &kp N2          &kp N3           &kp KP_MULTIPLY
                                                        	&kp LALT        &kp LGUI  	        &kp SPACE       &none 
		>;
		};	
			
		
		Mayer_tap_layer {
		bindings = <		
		&none       &none        &none        &none          &none		&kp LG(X)      &kp LG(C)      &kp UP       &kp LG(V)    &none 
		&kp LSFT    &none        &kp D        &none          &none		&kp LG(Z)      &kp LEFT       &kp DOWN     &kp RIGHT    &kp LSFT
		&kp LCTRL   &none        &none        &kp V          &none    		&none          &none          &none        &none        &mt LCTRL RET
					              &kp LALT       &kp LGUI  	        &kp SPACE      &none 
		>;
		};
		
		Wayer_tap_layer {
		bindings = <		
		&none       &none        &none        &none          &none		&kp LC(X)      &kp LC(C)      &kp UP       &kp LC(V)    &none 
		&kp LSFT    &none        &kp D        &none          &none		&kp LC(Z)      &kp LEFT       &kp DOWN     &kp RIGHT    &kp LSFT
		&kp LCTRL   &none        &none        &kp V          &none    		&none          &none          &none        &none        &mt LCTRL RET
					              &kp LALT       &kp LGUI  	        &kp SPACE      &none 
		>;
		};
        
	};
  
};

