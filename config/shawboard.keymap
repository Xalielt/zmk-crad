/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>


/* macros
*/
/ {
    macros {
        sig: sig {
            label = "sig";
            compatible = "zmk,behavior-macro";
	    wait-ms = <35>;
	    tap-ms = <35>;
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp LS(J) &kp I &kp M &kp SPACE &kp LS(S) &kp H &kp A &kp W &kp RET> 
		, <&macro_tap &kp J &kp I &kp M &kp ATSN &kp J &kp I &kp M &kp S &kp H &kp A &kp W &kp DOT &kp C &kp O &kp M &kp RET>
		;
        };
	
	signum: signum {
            label = "signum";
            compatible = "zmk,behavior-macro";
	    wait-ms = <35>;
	    tap-ms = <35>;
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp N0 &kp N4 &kp N6 &kp N7 &kp SPACE &kp N7 &kp N2 &kp N4 &kp SPACE &kp N4 &kp N3 &kp N1 &kp RET>
		;
        };
    };
};


&mt {
    flavor = "balanced";
   tapping_term_ms = <275>;
};
&lt {
   flavor = "tap-preferred";
    tapping_term_ms = <300>;
};
/ { 

    combos {
        compatible = "zmk,combos";
        combo_esc {
            timeout-ms = <40>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
        }; 

        combo_tilde {
            timeout-ms = <40>;
            key-positions = <1 2>;
            bindings = <&kp GRAVE>;
        };        
        combo_bspcl {
            timeout-ms = <40>;
            key-positions = <3 4>;
            bindings = <&kp BSPC>;
        };
           combo_tab {
            timeout-ms = <40>;
            key-positions = <10 11>;
            bindings = <&kp TAB>;
        };


           combo_word {
            timeout-ms = <40>;
            key-positions = <5 6 7>;
            bindings = <&kp LC(BSPC)>;
        };









        combo_bspc {
            timeout-ms = <40>;
            key-positions = <6 7>;
            bindings = <&kp BSPC>;
        };

           combo_del {
            timeout-ms = <40>;
            key-positions = <7 8>;
            bindings = <&kp DEL>;
        };
           combo_pipe {
            timeout-ms = <40>;
            key-positions = <8 9>;
            bindings = <&kp BSLH>;
        };
        
           combo_dash {
            timeout-ms = <40>;
            key-positions = <15 16>;
            bindings = <&kp MINUS>;
        };


           combo_qmrk {
            timeout-ms = <40>;
            key-positions = <16 17>;
            bindings = <&kp SINGLE_QUOTE>;
        };


        combo_excl {
            timeout-ms = <40>;
            key-positions = <16 17 18>;
            bindings = <&kp EXCL>;
        };

           combo_lpar {
            timeout-ms = <40>;
            key-positions = <26 27>;
            bindings = <&kp LPAR>;
        };

           combo_rpar {
            timeout-ms = <40>;
            key-positions = <27 28>;
            bindings = <&kp RPAR>;
        };
           combo_lbr {
            timeout-ms = <40>;
            key-positions = <25 26 27>;
            bindings = <&kp LEFT_BRACKET>;
        };

           combo_rbr {
            timeout-ms = <40>;
            key-positions = <26 27 28>;
            bindings = <&kp RIGHT_BRACKET>;
        };
    };




        keymap {
                compatible = "zmk,keymap";            
       	default_layer {
		bindings = <
		&lt 5 Q  &kp W  &kp E  &kp R  &lt 3 T 	   &kp Y  &kp U   &kp I   &kp O   &kp P 
		&mt LSHFT A    &kp S  &kp D  &kp F  &lt 4 G	   &kp H  &kp J   &kp K   &kp L   &mt LSHFT SEMI
		&mt LCTRL Z  &kp X  &kp C  &lt 1 V &lt 2 B &kp N  &kp M   &kp CMMA &kp DOT &mt LCTRL FSLH
                                &to 2  &kp LALT &kp LGUI   &mt LSHFT SPACE &mt LCTRL RET   &kp RALT
		>;
		};

       	symbol_layer {
		bindings = <
	        &kp BANG &kp ATSN  &kp DLLR  &none     &kp PRCT    	&kp CRRT    &kp AMPS   &kp EQUAL   &kp LPRN   &kp RPRN 
		&kp TAB  &kp LC(S) &kp DQT   &kp PIPE2 &kp HASH		&kp MINUS   &kp EQL    &kp LBKT    &kp RBKT   &kp DEL 
		&kp ESC  &kp TILDE &kp NON_US_BSLH &kp NON_US_HASH &kp TILDE2       &kp MINUS  &kp GRAVE   &kp LBKT   &kp RBKT        &kp DEL 
				   &to 0     &kp LALT  &kp LGUI 	&mt LSHFT SPACE   &mt LCTRL RET   &to 0
		>;
		};

		
		numpad_layer {
		bindings = <
		&kp F1	        &kp F2    &kp F3       &kp F4    &none          &kp KP_MULTIPLY &kp N7          &kp N8          &kp N9           &kp EQUAL
		&mt LSFT F5		&kp F6    &kp F7       &kp F8    &none          &kp KP_DOT      &kp N4          &kp N5          &kp N6           &mt LSFT KP_MINUS
		&mt LCTRL F9	&kp F10   &kp F11      &kp F12   &none   	&kp N0          &kp N1          &kp N2          &kp N3           &mt LCTRL KP_DIVIDE
                                       &to 3        &kp LALT  &kp LGUI  	&mt LSHFT SPACE       &mt LCTRL RET  &to 0
		>;
		};	
			
		
		Mayer_tap_layer {
		bindings = <		
		&kp HOME    &kp END      &kp PAGE_UP   &kp PAGE_DOWN  &kp K_APP	&kp LG(X)      &kp LG(C)      &kp UP       &kp LG(V)    &kp P 
		&kp LSFT    &kp S        &kp D         &none       &none	&kp LG(Z)      &kp LEFT       &kp DOWN     &kp RIGHT    &kp LSFT
		&kp LCTRL   &kp X        &kp C         &kp V       &none    	&kp RGUI          &none          &none        &none        &mt LCTRL RET
				         &to 4   &kp LALT    &kp LGUI  	&mt LSHFT SPACE      &mt LCTRL RET	      &to 0
		>;
		};
		
		Wayer_tap_layer {
		bindings = <		
		&kp HOME    &kp END      &kp PAGE_UP   &kp PAGE_DOWN &kp K_APP	    &kp LC(X)      &kp LC(C)      &kp UP       &kp LC(V)    &kp P
		&kp LSFT    &kp S        &kp D        &none          &none          &kp LC(Z)      &kp LEFT       &kp DOWN     &kp RIGHT    &kp LSFT
		&kp LCTRL   &kp X        &kp C        &kp V          &none    	    &kp RGUI          &none          &none        &none        &mt LCTRL RET
                                         &to 3        &kp LALT       &kp LGUI  	    &mt LSHFT SPACE      &mt LCTRL RET	&to 0
		>;
		};


		bt_layer {
		bindings = <
		&none      &bt BT_SEL 1    &bt BT_SEL 2    &bt BT_SEL 3   &bt BT_SEL 4	&kp C_VOLUME_UP       &kp C_VOLUME_DOWN     &kp C_MUTE  &none  &bt BT_CLR
		&kp LSFT   &out OUT_BLE    &out OUT_USB    &none          &none		&kp C_BRIGHTNESS_INC  &kp C_BRIGHTNESS_DEC  &none       &none  &none
		&kp LCTRL  &bt BT_NXT      &bt BT_PRV      &none          &none   	&none                 &none                 &none       &none  &bt BT_SEL 4
                                           &to 0           &bt BT_SEL 0	&bt BT_SEL 1	&bt BT_SEL 2	&bt BT_SEL 3    &bt BT_SEL 4
		>;
		};	


		
		
        
	};
  
};
